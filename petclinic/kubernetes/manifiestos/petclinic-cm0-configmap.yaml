apiVersion: v1
data:
  Dockerfile: "FROM eclipse-temurin:21-jdk-jammy AS base\nWORKDIR /app \n# Instalar Maven en la imagen \nRUN apt-get update && apt-get install -y maven\n\nCOPY ./mvn ./\n\nRUN chmod +x mvn \n\nCOPY mvn pom.xml ./\n\nCOPY src ./src\n\nRUN mvn dependency:resolve\n\n# Instalar el agente OpenTelemetry en base para compartirlo\nARG OTEL_AGENT_VERSION=1.32.0\nRUN curl -L https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/download/v${OTEL_AGENT_VERSION}/opentelemetry-javaagent.jar \\\n    -o /opt/opentelemetry-javaagent.jar\n\nFROM base AS development\n# Configura el agente OpenTelemetry y el debugger\nENV JAVA_OPTS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005\"\nENV JAVA_TOOL_OPTIONS=\"-javaagent:/opt/opentelemetry-javaagent.jar\"\nCMD [\"mvn\", \"spring-boot:run\", \"-Dspring-boot.run.profiles=mysql\"]\n\nFROM base AS build\nRUN mvn package\n\nFROM eclipse-temurin:21-jre-jammy AS production\nEXPOSE 8080\n\n# Copia el agente OpenTelemetry desde base\nCOPY --from=base /opt/opentelemetry-javaagent.jar /opt/opentelemetry-javaagent.jar\n\n# Configura OpenTelemetry para producción\nENV JAVA_TOOL_OPTIONS=\"-javaagent:/opt/opentelemetry-javaagent.jar\"\n\nCOPY --from=build /app/target/spring-petclinic-*.jar /spring-petclinic.jar\n\nCMD [\"java\", \"-Djava.security.egd=file:/dev/./urandom\", \"-jar\", \"/spring-petclinic.jar\"]\n\n"
  compose.monitor.yml: |-
    services:

    # Colector OpenTelemetry - Recopila métricas y trazas de los servicios

      otel:
        image: otel/opentelemetry-collector-contrib:latest
        command: [--config=/etc/otel-collector-config.yaml]
        volumes:
          - ./tools/otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
        ports:
          - '13133:13133' # health_check extension
          - '8888:8888' # Prometheus metrics exposed by the collector
          - '8889:8889' # Prometheus exporter metrics
        networks:
          - monitor
        depends_on:
          - jaeger
          - prometheus


    # Jaeger - Sistema de trazabilidad distribuida
      jaeger:
        image: jaegertracing/all-in-one:latest
        ports:
          - '4317:4317' # gRPC protocol
          - '9411:9411'
          - '16686:16686' # Jaeger UI
        environment:
          - COLLECTOR_OTLP_ENABLED=true
        networks:
          - monitor

    # Prometheus - Sistema de monitoreo y alertas
      prometheus:
        image: prom/prometheus:latest
        volumes:
          - ./tools/prometheus/prometheus.yaml:/etc/prometheus.yaml
          - "./tools/prometheus/rules.yml:/etc/prometheus/rules.yml"
          - prometheus-data:/prometheus
        command:
          - --web.enable-lifecycle
          - --config.file=/etc/prometheus.yaml
          - --enable-feature=otlp-write-receiver
        restart: always
        ports:
          - '9090:9090' # UI
        networks:
          - monitor


    volumes:
      log-data:
        driver: local
      prometheus-data:


    networks:
      monitor:
  compose.yml: "\nservices:\n  petclinic:\n    container_name: petclinic\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: development\n    ports:\n      - 8080:8080\n      - 8000:8000\n      - \"9464:9464\"  # Puerto para Prometheus metrics\n\n    environment:\n      - PORT=8080\n      - MYSQL_URL=jdbc:mysql://mysqlserver/petclinic\n      - OTEL_TRACES_EXPORTER=otlp\n      - OTEL_METRICS_EXPORTER=otlp\n      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel:4317\n      - OTEL_SERVICE_NAME=petclinic-service\n      - OTEL_RESOURCE_ATTRIBUTES=service.name=petclinic-service\n      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc\n      - OTEL_TRACES_SAMPLER=parentbased_always_on\n      - MANAGEMENT_SERVER_PORT=9464\n      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=prometheus,health,info,metrics      \n\n    volumes:\n      - ./:/app\n    depends_on:\n      - mysqlserver\n    networks:\n      - monitor   \n  mysqlserver:\n    image: mysql:8\n    ports:\n      - 3306:3306\n    environment:\n      - MYSQL_ROOT_PASSWORD=\n      - MYSQL_ALLOW_EMPTY_PASSWORD=true\n      - MYSQL_USER=petclinic\n      - MYSQL_PASSWORD=petclinic\n      - MYSQL_DATABASE=petclinic\n    networks:\n      - monitor  \n  grafana:\n    image: grafana/grafana\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - grafana-storage:/var/lib/grafana\n    networks:\n      - monitor\n\nvolumes:\n  grafana-storage: \n\nnetworks:\n  monitor:"
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: petclinic
  name: petclinic-cm0
